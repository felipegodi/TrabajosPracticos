install.packages("ctv")
install.packages("rgdal")
install.packages("tmap")
library(ctv)
install.views("Econometrics")
library(rgdal)
library(dplyr)
library(ggplot2)
library(tmap)
setwd("~/Documents/UdeSA/Maestría/Herramientas computacionales/TrabajosPracticos/TP 5")
lnd <- readOGR("data/london_sport.shp")
crime_data <- read.csv("data/mps-recordedcrime-borough.csv",
stringsAsFactors = FALSE)
crime_theft <- crime_data[crime_data$CrimeType == "Theft & Handling", ]
crime_ag <- aggregate(CrimeCount ~ Borough, FUN = sum, data = crime_theft)
lnd$name %in% crime_ag$Borough
lnd$name[!lnd$name %in% crime_ag$Borough]
lnd@data <- left_join(lnd@data, crime_ag, by = c('name' = 'Borough'))
tm_shape(lnd) +
#tm_style("classic")+
tm_polygons("CrimeCount",
#palette = "-RdYlGn",
#style = "jenks",
n=4,
#legend.hist = TRUE #esto sirve para agregar un histograma y ver la distribución de los valores, pero no queda bien
)+
tm_layout(main.title = "Thefts in London",
main.title.position = "center",
title.snap.to.legend = TRUE,
title = "Amount of thefts by borough",
panel.show = FALSE,
#bg.color = "grey85", # para setear el color de fondo
legend.outside = TRUE,
frame = FALSE, #le saco el marco al mapa
#legend.hist.height = 0.5, #alto del histograma en la leyenda (lo sacaría)
#legend.hist.width = 1,  #ancho del histograma en la leyenda (lo sacaría)
title.position = c("center", "top"))
tmap_mode("view")
qtm(lnd, "CrimeCount") # plot the basic map
qtm(shp = lnd,
fill = "CrimeCount",
#fill.palette = "OrRd",
fill.title = "Thefts by borough in London",
main.title = "AAAAAAAAA",
breaks = c(1, 20, 40, 60, 80),
legend.hist = TRUE,
legend.outside = TRUE,
legend.outside.position = "right",
)
tmap_style("cobalt")
qtm(lnd, fill = "CrimeCount", format = "World")
library(ggplot2)
p <- ggplot(lnd@data, aes(Partic_Per, Pop_2001))
p + geom_point(aes(colour = Partic_Per, size = Pop_2001)) +
geom_text(size = 2, aes(label = name))
install.packages("broom")
install.packages("broom")
lnd_f <- broom::tidy(lnd)
lnd$id <- row.names(lnd) # allocate an id variable to the sp data
head(lnd@data, n = 2) # final check before join (requires shared variable name)
lnd_f <- left_join(lnd_f, lnd@data) # join the data
map <- ggplot(lnd_f, aes(long, lat, group = group, fill = Partic_Per)) +
geom_polygon() + coord_equal() +
labs(x = "Easting (m)", y = "Northing (m)",
fill = "% Sports\nParticipation") +
ggtitle("London Sports Participation")
library(ggplot2)
map <- ggplot(lnd_f, aes(long, lat, group = group, fill = Partic_Per)) +
geom_polygon() + coord_equal() +
labs(x = "Easting (m)", y = "Northing (m)",
fill = "% Sports\nParticipation") +
ggtitle("London Sports Participation")
map + scale_fill_gradient(low = "white", high = "black")
library(rgdal)
library(dplyr)
library(ggplot2)
library(tmap)
map <- ggplot(lnd_f, aes(long, lat, group = group, fill = Partic_Per)) +
geom_polygon() + coord_equal() +
labs(x = "Easting (m)", y = "Northing (m)",
fill = "% Sports\nParticipation") +
ggtitle("London Sports Participation")
map + scale_fill_gradient(low = "white", high = "black")
library(rgdal)
library(dplyr)
library(ggplot2)
library(tmap)
setwd("~/Documents/UdeSA/Maestría/Herramientas computacionales/TrabajosPracticos/TP 5")
lnd <- readOGR("data/london_sport.shp")
crime_data <- read.csv("data/mps-recordedcrime-borough.csv",
stringsAsFactors = FALSE)
# Nos quedamos con los crimenes "Theft & Handling"
crime_theft <- crime_data[crime_data$CrimeType == "Theft & Handling", ]
# Calculamos la cantidad (suma) de thefts para cada distrito (borough) en Londres
crime_ag <- aggregate(CrimeCount ~ Borough, FUN = sum, data = crime_theft)
# Chequeamos que los nombres de los boroughs coincidan en lnd  y crime_ag, luego vemos cuáles son las que no coinciden (City of London no está en la base crime_ag)
lnd$name %in% crime_ag$Borough
lnd$name[!lnd$name %in% crime_ag$Borough]
# Mergeamos las bases de datos con un left join (nos quedamos con los datos que coinciden)
lnd@data <- left_join(lnd@data, crime_ag, by = c('name' = 'Borough'))
tm_shape(lnd) +
#tm_style("classic")+
tm_polygons("CrimeCount",
#palette = "-RdYlGn",
#style = "jenks",
n=4,
#legend.hist = TRUE #esto sirve para agregar un histograma y ver la distribución de los valores, pero no queda bien
)+
tm_layout(main.title = "Thefts in London",
main.title.position = "center",
title.snap.to.legend = TRUE,
title = "Amount of thefts by borough",
panel.show = FALSE,
#bg.color = "grey85", # para setear el color de fondo
legend.outside = TRUE,
frame = FALSE, #le saco el marco al mapa
#legend.hist.height = 0.5, #alto del histograma en la leyenda (lo sacaría)
#legend.hist.width = 1,  #ancho del histograma en la leyenda (lo sacaría)
title.position = c("center", "top"))
tmap_mode("view")
qtm(lnd, "CrimeCount") # plot the basic map
qtm(shp = lnd,
fill = "CrimeCount",
#fill.palette = "OrRd",
fill.title = "Thefts by borough in London",
main.title = "AAAAAAAAA",
breaks = c(1, 20, 40, 60, 80),
legend.hist = TRUE,
legend.outside = TRUE,
legend.outside.position = "right",
)
tmap_style("cobalt")
qtm(lnd, fill = "CrimeCount", format = "World")
p <- ggplot(lnd@data, aes(Partic_Per, Pop_2001))
p + geom_point(aes(colour = Partic_Per, size = Pop_2001)) +
geom_text(size = 2, aes(label = name))
lnd_f <- broom::tidy(lnd)
# This step has lost the attribute information associated with the lnd object. We can add it back using the left_join function from the dplyr package (see ?left_join).
lnd$id <- row.names(lnd) # allocate an id variable to the sp data
head(lnd@data, n = 2) # final check before join (requires shared variable name)
lnd_f <- left_join(lnd_f, lnd@data) # join the data
# The new lnd_f object contains coordinates alongside the attribute information associated with each London Borough. It is now straightforward to produce a map with ggplot2. coord_equal() is the equivalent of asp = T in regular plots with R:
## ----"Map of Lond Sports Participation"-------------------------------
map <- ggplot(lnd_f, aes(long, lat, group = group, fill = Partic_Per)) +
geom_polygon() + coord_equal() +
labs(x = "Easting (m)", y = "Northing (m)",
fill = "% Sports\nParticipation") +
ggtitle("London Sports Participation")
map + scale_fill_gradient(low = "white", high = "black")
map
library("ggplot2")
library("tibble")
library("gridExtra")
library("dplyr")
library("Lock5Data")
install.packages("Lock4Data")
install.packages("Lock5Data")
install.packages("gridExtra")
install.packages("gridExtra")
library("ggplot2")
library("tibble")
library("gridExtra")
library("dplyr")
library("Lock5Data")
library("ggthemes")
install.packages("ggthemes")
library("ggplot2")
library("tibble")
library("gridExtra")
library("dplyr")
library("Lock5Data")
library("ggthemes")
library("fun")
install.packages("maps")
install.packages("mapproj")
install.packages("corrplot")
install.packages("fun")
install.packages("zoo")
library("ggplot2")
library("tibble")
library("gridExtra")
library("dplyr")
library("Lock5Data")
library("ggthemes")
library("fun")
library("zoo")
library("corrplot")
library("maps")
library("mapproj")
setwd("~/Documents/UdeSA/Maestría/Herramientas computacionales/Clase 5/Applied-Data-Visualization-with-R-and-ggplot2-master")
df <- read.csv("data/gapminder-data.csv")
df2 <- read.csv("data/xAPI-Edu-Data.csv")
df3 <- read.csv("data/LoanStats.csv")
df <- read.csv("data/gapminder-data.csv")
df2 <- read.csv("data/xAPI-Edu-Data.csv")
df3 <- read.csv("data/LoanStats.csv")
p1 <- ggplot(df,aes(x=Electricity_consumption_per_capita))
p2 <- p1+geom_histogram()
p2
p3 <- p1+geom_histogram(bins=15)
p3
p4 <- p3+xlab("Electricity consumption per capita")
p4
p1 <- ggplot(df,aes(x=gdp_per_capita))
p2 <- p1+geom_histogram()
p2
#the question
p2 + scale_x_continuous(breaks=seq(0,40000,4000))
p <- ggplot(df, aes(x=gdp_per_capita, y=Electricity_consumption_per_capita)) +
geom_point()
p + facet_grid(Country ~ .) #Horizontally Arranged
p + facet_grid(. ~ Country) #Vertically Arranged
p + facet_wrap(~Country)
df3s <- subset(df3,grade %in% c("A","B","C","D","E","F","G"))
pb1<-ggplot(df3s,aes(x=loan_amnt))
pb1
pb2<-pb1+geom_histogram(bins=10,fill="cadetblue4")
pb2
#Facet_wrap
pb3<-pb2+facet_wrap(~grade)
pb3
#Free y coordinate for the subplots
pb4<-pb3+facet_wrap(~grade, scale="free_y")
pb4
dfs <- subset(df,Country %in% c("Germany","India","China","United States"))
var1<-"Electricity_consumption_per_capita"
var2<-"gdp_per_capita"
name1<- "Electricity/capita"
name2<- "GDP/capita"
# Change color and shape of points
p1<- ggplot(dfs,aes_string(x=var1,y=var2))+
geom_point(color=2,shape=2)+xlim(0,10000)+xlab(name1)+ylab(name2)
p1
#Grouping points by a variable mapped to colour and shape
p2 <- ggplot(dfs,aes_string(x=var1,y=var2))+
geom_point(aes(color=Country,shape=Country))+xlim(0,10000)+xlab(name1)+ylab(name2)
grid.arrange(p1, p2, nrow = 2)
#Activity C:Using color differentiation in plots
#Supongamos que un banco ha concedido préstamos a personas con características diferentes (por ejemplo, situación laboral, propiedad de la vivienda, grado de crédito, etc.) y queremos ver las relaciones entre algunas de esas variables.
#Objetivo: Ver la distribución de la cantidad de préstamo frente a ser propietario de una casa usando diferentes colores según el nivel de crédito".
#color differentiate with credit grade.
dfn <- df3[,c("home_ownership","loan_amnt","grade")]
dfn <- na.omit(dfn) #remove NA y NONE
dfn <- subset(dfn, !dfn$home_ownership %in% c("NONE"))
ggplot(dfn,aes(x=home_ownership,y=loan_amnt))+geom_boxplot(aes(fill=grade))
#People with higher credit grades take smaller loans
#People with lower credit grades take small loans if they don't have a mortgage.
#Finer labelling in y
ggplot(dfn,aes(x=home_ownership,y=loan_amnt))+geom_boxplot(aes(fill=grade))+
scale_y_continuous(breaks=seq(0,40000,2000))
#Subtopic: Themes and changing the appearance of graphs
dfn <- subset(HollywoodMovies2013, Genre %in% c("Action","Adventure","Comedy","Drama","Romance")
& LeadStudio %in% c("Fox","Sony","Columbia","Paramount","Disney"))
p1 <- ggplot(dfn,aes(Genre,WorldGross))
p1
p2 <- p1+geom_bar(stat="Identity",aes(fill=LeadStudio),position="dodge")
p2
p3 <- p2+theme(axis.title.x=element_text(size=15),
axis.title.y=element_text(size=15),
plot.background=element_rect(fill="gray87"),
panel.background = element_rect(fill="beige"),
panel.grid.major = element_line(color="Gray",linetype=1)
)
p3
p4 <- p2+theme_bw()+ggtitle("theme_bw()")
p5 <- p2+theme_classic()+ggtitle("theme_classic()")
p6 <- p2+theme_grey()+ggtitle("theme_grey()")
p7 <- p2+theme_minimal()+ggtitle("theme_minimal()")
grid.arrange(p4,p5,p6,p7,nrow=2,ncol=2)
install.packages("purrr")
install.packages("purrr")
library("purrr")
p7b <- p2+theme_economist()+ggtitle("theme_economist()")+scale_colour_economist()
p7b
q2 <- ggplot(dfs,aes_string(x=var1,y=var2))+
geom_point(aes(color=Country,shape=Country))+xlim(0,10000)+xlab(name1)+ylab(name2)+theme_economist()+scale_colour_economist()
q2
mytheme <- theme(
text = element_text(colour="Blue"),
axis.text = element_text(size=12,color="Red"),
axis.title = element_text(size = rel(1.5)))
p2 <- p2+ggtitle("Original Plot")
p8 <- p2+mytheme+ggtitle("Changed Plot with my theme")
grid.arrange(p2,p8,ncol=2)
p4 + scale_fill_brewer(palette="Spectral")
p4 + scale_fill_brewer(palette="Pastel1")
p4 + scale_fill_brewer(palette="Oranges")
#Activity C: Using themes and color differentiation in a plot
pd1 <- ggplot(df,aes(x=BMI_male,y=BMI_female))
pd2 <- pd1+geom_point()
pd2
pd3 <- pd1+geom_point(aes(color=Country),size=2)+
scale_colour_brewer(palette="Dark2")
pd3
pd4 <- pd3+theme(axis.title=element_text(size=15,color="cadetblue4",
face="bold"),
plot.title=element_text(color="cadetblue4",size=18,
face="bold.italic"),
panel.background = element_rect(fill="azure",color="black"),
panel.grid=element_blank(),
legend.position="bottom",
legend.justification="left",
legend.title = element_blank(),
legend.key = element_rect(color=3,fill="gray97")
)+
xlab("BMI Male")+
ylab("BMI female")+
ggtitle("BMI female vs BMI Male")
pd4
dfs <- subset(df,Country %in% c("Germany","India","China","United States","Japan"))
ggplot(dfs,aes(x=Year,y=Electricity_consumption_per_capita)) + geom_point(aes(size=population,color=Country))+
coord_cartesian(xlim=c(1950,2020))+
labs(subtitle="Electricity consumption vs Year",
title="Bubble chart")+ylab("Electricity consumption")+
scale_size(breaks=c(0,1e+8,0.3e+9,0.5e+9,1e+9,1.5e+9),range=c(1,5))
df3s <- subset(df3,grade %in% c("A","B","C","D","E","F","G"))
ggplot(df3s,aes(x=loan_amnt)) + geom_histogram() + facet_wrap(~grade)
ggplot(df3s,aes(x=loan_amnt)) + geom_density() + facet_wrap(~grade)
# Superimposing plots
ggplot(df3,aes(x=loan_amnt)) + geom_density(aes(fill=grade),alpha=1/2) +
scale_fill_brewer(palette="Dark2") + xlab("Loan Amount") + theme_light()
ggplot(df3,aes(x=loan_amnt))+ geom_density(aes(color=grade),alpha=0.2) +
scale_fill_brewer(palette="Dark2") + xlab("Loan Amount") + theme_classic()
# Maps
states_map <- map_data("state")
glimpse(states_map)
ggplot(states_map, aes(x=long, y=lat, group=group)) +    geom_polygon(fill="white", colour="black")
ggplot(states_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("mercator")
### World map data
# Get map data for world
world_map <- map_data("world")
ggplot(world_map, aes(x=long, y=lat, group=group)) +    geom_polygon(fill="white", colour="black")
### Map of Europe
europe <- map_data("world", region=c("Germany", "Spain", "Italy","France","UK","Ireland"))
ggplot(europe, aes(x=long, y=lat, group=group, fill=region)) + geom_polygon(colour="black") + scale_fill_brewer(palette="Set3")
USStates$Statelower <- as.character(tolower(USStates$State))
glimpse(USStates)
us_data <- merge(USStates,states_map,by.x="Statelower",by.y="region")
head(us_data)
ggplot(us_data, aes(x=long, y=lat, group=group, fill=ClintonVote)) + geom_polygon(colour="black") +
coord_map("mercator")+scale_fill_gradient(low="red",high="blue")
## Trends, correlations and statistical summaries
#Read the data
df_fb <- read.csv("data/FB.csv")
df_fb$Date <- as.Date(df_fb$Date)
#Use strftime to get the month for each date
df_fb$Month <- strftime(df_fb$Date,"%m")
df_fb$Month <- as.numeric(df_fb$Month)
ggplot(df_fb, aes(Month,Close)) +
geom_point(color="red",alpha=1/2,position = position_jitter(h=0.0,w=0.0))+
geom_line(stat='summary',fun.y=mean, color="blue",size=1)+
scale_x_continuous(breaks=seq(0,13,1))+
ggtitle("Monthly Closing Stock Prices: Facebook")+theme_classic()
ggplot(dfs, aes(gdp_per_capita,Electricity_consumption_per_capita)) + geom_point(aes(color=Country))+xlim(0,30000)+ stat_smooth(method=lm)
ggplot(dfs, aes(gdp_per_capita,Electricity_consumption_per_capita,color=Country)) + geom_point() + stat_smooth(method=lm)
dfs1 <- dfs[,colnames(dfs)[4:9]]
dfs1 <- na.omit(dfs1)
M <- cor(dfs1)
corrplot(M,method="number")
#The plot looks messy because of the long names. Let's change the names to shorter names.
colnames(dfs1) <- c("gdp","electricity","mort","pov","bmi_m","bmi_f")
M <- cor(dfs1)
corrplot(M,method="number")
# One can see that the positively correlated variables (in Blue and Darkblue) are:
#One can also try other methods for the correlation plots:
corrplot(M,method="circle")
corrplot(M,method="pie")
t <- subset(df3,grade=="A")
z1 <- ggplot(t, aes(total_pymnt_inv,total_rec_prncp,color=grade)) + geom_point() + stat_smooth(method=lm)
z2 <- ggplot(t, aes(funded_amnt,total_pymnt_inv,color=grade)) + geom_point() + stat_smooth(method=lm,color=2)
grid.arrange(z1,z2,ncol=2)
#Both of these plots reveal an (approximate) linear relationship between the preceding pairs, confirming the numbers that we obtained with the cor command.”
setwd("~/Documents/UdeSA/Maestría/Herramientas computacionales/TrabajosPracticos/TP 5")
setwd("~/Documents/UdeSA/Maestría/Herramientas computacionales/TrabajosPracticos/TP 5")
lnd <- readOGR("data/london_sport.shp")
a usar
library(rgdal)
library(dplyr)
library(ggplot2)
library(tmap)
lnd <- readOGR("data/london_sport.shp")
crime_data <- read.csv("data/mps-recordedcrime-borough.csv",
stringsAsFactors = FALSE)
crime_theft <- crime_data[crime_data$CrimeType == "Theft & Handling", ]
crime_ag <- aggregate(CrimeCount ~ Borough, FUN = sum, data = crime_theft)
lnd$name %in% crime_ag$Borough
lnd$name[!lnd$name %in% crime_ag$Borough]
lnd@data <- left_join(lnd@data, crime_ag, by = c('name' = 'Borough'))
tm_shape(lnd) +
#tm_style("classic")+
tm_polygons("CrimeCount",
#palette = "-RdYlGn",
#style = "jenks",
n=4,
#legend.hist = TRUE #esto sirve para agregar un histograma y ver la distribución de los valores, pero no queda bien
)+
tm_layout(main.title = "Thefts in London",
main.title.position = "center",
title.snap.to.legend = TRUE,
title = "Amount of thefts by borough",
panel.show = FALSE,
#bg.color = "grey85", # para setear el color de fondo
legend.outside = TRUE,
frame = FALSE, #le saco el marco al mapa
#legend.hist.height = 0.5, #alto del histograma en la leyenda (lo sacaría)
#legend.hist.width = 1,  #ancho del histograma en la leyenda (lo sacaría)
title.position = c("center", "top"))
tmap_mode("view")
qtm(lnd, "CrimeCount") # plot the basic map
qtm(shp = lnd,
fill = "CrimeCount",
#fill.palette = "OrRd",
fill.title = "Thefts by borough in London",
main.title = "AAAAAAAAA",
breaks = c(1, 20, 40, 60, 80),
legend.hist = TRUE,
legend.outside = TRUE,
legend.outside.position = "right",
)
tmap_style("cobalt")
qtm(lnd, fill = "CrimeCount", format = "World")
p <- ggplot(lnd@data, aes(Partic_Per, Pop_2001))
p + geom_point(aes(colour = Partic_Per, size = Pop_2001)) +
geom_text(size = 2, aes(label = name))
lnd_f <- broom::tidy(lnd)
lnd$id <- row.names(lnd) # allocate an id variable to the sp data
head(lnd@data, n = 2) # final check before join (requires shared variable name)
lnd_f <- left_join(lnd_f, lnd@data) # join the data
map <- ggplot(lnd_f, aes(long, lat, group = group, fill = Partic_Per)) +
geom_polygon() + coord_equal() +
labs(x = "Easting (m)", y = "Northing (m)",
fill = "% Sports\nParticipation") +
ggtitle("London Sports Participation")
map + scale_fill_gradient(low = "white", high = "black")
map
